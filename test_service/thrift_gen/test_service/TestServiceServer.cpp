// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TestService.h"
#include "CalculatorService.h"
#include "simple_log.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/TToString.h>

#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransport.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/protocol/TProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::test_service;
using namespace  ::calculator;

class TestServiceHandler : virtual public TestServiceIf {
 public:
  TestServiceHandler() {
  }

  void TestInterface(TestServiceResponse& _return, const TestServiceRequest& req) {
	using apache::thrift::to_string;
	log_info("TestInterface||entry||req=%s", to_string(req).c_str());
	
	boost::shared_ptr<TSocket> socket(new TSocket("127.0.0.1", 1234));
	boost::shared_ptr<TTransport> transport(new TFramedTransport(socket));
	boost::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));

	/*
	socket->setConnTimeout(500);
	socket->setRecvTimeout(300);
	socket->setSendTimeout(300);
	*/
	
	shared_ptr<CalculatorServiceClient> client(new CalculatorServiceClient(protocol));

	CalculateRequest creq;
	CalculateResponse crsp;	

	creq.left = req.left;
	creq.right = req.right;
	creq.op = (calculator::OPType::type)req.op;

	log_info("TestInterface||calculate||req=%s", to_string(creq).c_str());
	transport->open();
	try {
		client->Calculate(crsp, creq);	
	} catch (TException& tx) {
		log_error("TestInterface||calculate error||err=%s", tx.what());
		transport->close();
	}
	transport->close();
	log_info("TestInterface||calculate||rsp=%s", to_string(crsp).c_str());

	_return.errorCode = crsp.errorCode;
	_return.errorMsg = crsp.errorMsg;
	_return.result = crsp.result;

	log_info("TestInterface||exit||rsp=%s", to_string(_return).c_str());
  }
};

void start_server() {
  int port = 9838;
  shared_ptr<TestServiceHandler> handler(new TestServiceHandler());
  shared_ptr<TProcessor> processor(new TestServiceProcessor(handler));

  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TFramedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  log_info("test service start server...");
  server.serve();
  return ;
}

