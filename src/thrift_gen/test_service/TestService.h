/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestService_H
#define TestService_H

#include <thrift/TDispatchProcessor.h>
#include "test_service_types.h"

namespace test_service {

class TestServiceIf {
 public:
  virtual ~TestServiceIf() {}
  virtual void TestInterface(TestServiceResponse& _return, const TestServiceRequest& req) = 0;
};

class TestServiceIfFactory {
 public:
  typedef TestServiceIf Handler;

  virtual ~TestServiceIfFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestServiceIf* /* handler */) = 0;
};

class TestServiceIfSingletonFactory : virtual public TestServiceIfFactory {
 public:
  TestServiceIfSingletonFactory(const boost::shared_ptr<TestServiceIf>& iface) : iface_(iface) {}
  virtual ~TestServiceIfSingletonFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TestServiceIf> iface_;
};

class TestServiceNull : virtual public TestServiceIf {
 public:
  virtual ~TestServiceNull() {}
  void TestInterface(TestServiceResponse& /* _return */, const TestServiceRequest& /* req */) {
    return;
  }
};

typedef struct _TestService_TestInterface_args__isset {
  _TestService_TestInterface_args__isset() : req(false) {}
  bool req :1;
} _TestService_TestInterface_args__isset;

class TestService_TestInterface_args {
 public:

  static const char* ascii_fingerprint; // = "D340F36C58B35542947645C6F23A4FCC";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x40,0xF3,0x6C,0x58,0xB3,0x55,0x42,0x94,0x76,0x45,0xC6,0xF2,0x3A,0x4F,0xCC};

  TestService_TestInterface_args(const TestService_TestInterface_args&);
  TestService_TestInterface_args& operator=(const TestService_TestInterface_args&);
  TestService_TestInterface_args() {
  }

  virtual ~TestService_TestInterface_args() throw();
  TestServiceRequest req;

  _TestService_TestInterface_args__isset __isset;

  void __set_req(const TestServiceRequest& val);

  bool operator == (const TestService_TestInterface_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TestService_TestInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_TestInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_TestInterface_args& obj);
};


class TestService_TestInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "D340F36C58B35542947645C6F23A4FCC";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x40,0xF3,0x6C,0x58,0xB3,0x55,0x42,0x94,0x76,0x45,0xC6,0xF2,0x3A,0x4F,0xCC};


  virtual ~TestService_TestInterface_pargs() throw();
  const TestServiceRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_TestInterface_pargs& obj);
};

typedef struct _TestService_TestInterface_result__isset {
  _TestService_TestInterface_result__isset() : success(false) {}
  bool success :1;
} _TestService_TestInterface_result__isset;

class TestService_TestInterface_result {
 public:

  static const char* ascii_fingerprint; // = "215C261FE424362FF87724B464DEF2DC";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x5C,0x26,0x1F,0xE4,0x24,0x36,0x2F,0xF8,0x77,0x24,0xB4,0x64,0xDE,0xF2,0xDC};

  TestService_TestInterface_result(const TestService_TestInterface_result&);
  TestService_TestInterface_result& operator=(const TestService_TestInterface_result&);
  TestService_TestInterface_result() {
  }

  virtual ~TestService_TestInterface_result() throw();
  TestServiceResponse success;

  _TestService_TestInterface_result__isset __isset;

  void __set_success(const TestServiceResponse& val);

  bool operator == (const TestService_TestInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TestService_TestInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_TestInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TestService_TestInterface_result& obj);
};

typedef struct _TestService_TestInterface_presult__isset {
  _TestService_TestInterface_presult__isset() : success(false) {}
  bool success :1;
} _TestService_TestInterface_presult__isset;

class TestService_TestInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "215C261FE424362FF87724B464DEF2DC";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x5C,0x26,0x1F,0xE4,0x24,0x36,0x2F,0xF8,0x77,0x24,0xB4,0x64,0xDE,0xF2,0xDC};


  virtual ~TestService_TestInterface_presult() throw();
  TestServiceResponse* success;

  _TestService_TestInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TestService_TestInterface_presult& obj);
};

class TestServiceClient : virtual public TestServiceIf {
 public:
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void TestInterface(TestServiceResponse& _return, const TestServiceRequest& req);
  void send_TestInterface(const TestServiceRequest& req);
  void recv_TestInterface(TestServiceResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TestServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_TestInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestServiceProcessor(boost::shared_ptr<TestServiceIf> iface) :
    iface_(iface) {
    processMap_["TestInterface"] = &TestServiceProcessor::process_TestInterface;
  }

  virtual ~TestServiceProcessor() {}
};

class TestServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestServiceProcessorFactory(const ::boost::shared_ptr< TestServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TestServiceIfFactory > handlerFactory_;
};

class TestServiceMultiface : virtual public TestServiceIf {
 public:
  TestServiceMultiface(std::vector<boost::shared_ptr<TestServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TestServiceIf> > ifaces_;
  TestServiceMultiface() {}
  void add(boost::shared_ptr<TestServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void TestInterface(TestServiceResponse& _return, const TestServiceRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TestInterface(_return, req);
    }
    ifaces_[i]->TestInterface(_return, req);
    return;
  }

};

} // namespace

#endif
