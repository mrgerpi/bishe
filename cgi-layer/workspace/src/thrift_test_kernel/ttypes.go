// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift_test_kernel

import (
	"bytes"
	"fmt"
	"thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ServiceType int64

const (
	ServiceType_Client ServiceType = 0
	ServiceType_Server ServiceType = 1
)

func (p ServiceType) String() string {
	switch p {
	case ServiceType_Client:
		return "ServiceType_Client"
	case ServiceType_Server:
		return "ServiceType_Server"
	}
	return "<UNSET>"
}

func ServiceTypeFromString(s string) (ServiceType, error) {
	switch s {
	case "ServiceType_Client":
		return ServiceType_Client, nil
	case "ServiceType_Server":
		return ServiceType_Server, nil
	}
	return ServiceType(0), fmt.Errorf("not a valid ServiceType string")
}

func ServiceTypePtr(v ServiceType) *ServiceType { return &v }

type GetServiceListRequest struct {
	TypeA1 ServiceType `thrift:"type,1,required" json:"type"`
}

func NewGetServiceListRequest() *GetServiceListRequest {
	return &GetServiceListRequest{}
}

func (p *GetServiceListRequest) GetTypeA1() ServiceType {
	return p.TypeA1
}
func (p *GetServiceListRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServiceListRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ServiceType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *GetServiceListRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetServiceListRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServiceListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *GetServiceListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceListRequest(%+v)", *p)
}

type GetServiceListResponse struct {
	ErrorCode    int32    `thrift:"errorCode,1,required" json:"errorCode"`
	InstanceList []string `thrift:"instanceList,2,required" json:"instanceList"`
}

func NewGetServiceListResponse() *GetServiceListResponse {
	return &GetServiceListResponse{}
}

func (p *GetServiceListResponse) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *GetServiceListResponse) GetInstanceList() []string {
	return p.InstanceList
}
func (p *GetServiceListResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServiceListResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *GetServiceListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.InstanceList = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.InstanceList = append(p.InstanceList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetServiceListResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetServiceListResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServiceListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *GetServiceListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("instanceList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:instanceList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InstanceList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.InstanceList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:instanceList: %s", p, err)
	}
	return err
}

func (p *GetServiceListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceListResponse(%+v)", *p)
}

type AddServiceRequest struct {
	TypeA1         ServiceType `thrift:"type,1,required" json:"type"`
	ServiceName    string      `thrift:"serviceName,2,required" json:"serviceName"`
	Version        string      `thrift:"version,3,required" json:"version"`
	Port           int32       `thrift:"port,4,required" json:"port"`
	Transport      string      `thrift:"transport,5,required" json:"transport"`
	Protocol       string      `thrift:"protocol,6,required" json:"protocol"`
	IdlAbsFileName string      `thrift:"idlAbsFileName,7,required" json:"idlAbsFileName"`
}

func NewAddServiceRequest() *AddServiceRequest {
	return &AddServiceRequest{}
}

func (p *AddServiceRequest) GetTypeA1() ServiceType {
	return p.TypeA1
}

func (p *AddServiceRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *AddServiceRequest) GetVersion() string {
	return p.Version
}

func (p *AddServiceRequest) GetPort() int32 {
	return p.Port
}

func (p *AddServiceRequest) GetTransport() string {
	return p.Transport
}

func (p *AddServiceRequest) GetProtocol() string {
	return p.Protocol
}

func (p *AddServiceRequest) GetIdlAbsFileName() string {
	return p.IdlAbsFileName
}
func (p *AddServiceRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddServiceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ServiceType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *AddServiceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *AddServiceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *AddServiceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *AddServiceRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Transport = v
	}
	return nil
}

func (p *AddServiceRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Protocol = v
	}
	return nil
}

func (p *AddServiceRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.IdlAbsFileName = v
	}
	return nil
}

func (p *AddServiceRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddServiceRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddServiceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:serviceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.serviceName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:serviceName: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:version: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:port: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return fmt.Errorf("%T.port (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:port: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transport", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:transport: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Transport)); err != nil {
		return fmt.Errorf("%T.transport (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:transport: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:protocol: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Protocol)); err != nil {
		return fmt.Errorf("%T.protocol (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:protocol: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idlAbsFileName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:idlAbsFileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IdlAbsFileName)); err != nil {
		return fmt.Errorf("%T.idlAbsFileName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:idlAbsFileName: %s", p, err)
	}
	return err
}

func (p *AddServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddServiceRequest(%+v)", *p)
}

type AddServiceResponse struct {
	ErrorCode int32 `thrift:"errorCode,1,required" json:"errorCode"`
}

func NewAddServiceResponse() *AddServiceResponse {
	return &AddServiceResponse{}
}

func (p *AddServiceResponse) GetErrorCode() int32 {
	return p.ErrorCode
}
func (p *AddServiceResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddServiceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *AddServiceResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddServiceResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddServiceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *AddServiceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddServiceResponse(%+v)", *p)
}

type FillDataRequest struct {
	TypeA1      ServiceType `thrift:"type,1,required" json:"type"`
	ServiceName string      `thrift:"serviceName,2,required" json:"serviceName"`
	MethodName  string      `thrift:"methodName,3,required" json:"methodName"`
	Data        string      `thrift:"data,4,required" json:"data"`
}

func NewFillDataRequest() *FillDataRequest {
	return &FillDataRequest{}
}

func (p *FillDataRequest) GetTypeA1() ServiceType {
	return p.TypeA1
}

func (p *FillDataRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *FillDataRequest) GetMethodName() string {
	return p.MethodName
}

func (p *FillDataRequest) GetData() string {
	return p.Data
}
func (p *FillDataRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FillDataRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := ServiceType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *FillDataRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *FillDataRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MethodName = v
	}
	return nil
}

func (p *FillDataRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *FillDataRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FillDataRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FillDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *FillDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:serviceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.serviceName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:serviceName: %s", p, err)
	}
	return err
}

func (p *FillDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("methodName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:methodName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MethodName)); err != nil {
		return fmt.Errorf("%T.methodName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:methodName: %s", p, err)
	}
	return err
}

func (p *FillDataRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:data: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return fmt.Errorf("%T.data (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:data: %s", p, err)
	}
	return err
}

func (p *FillDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillDataRequest(%+v)", *p)
}

type FillDataResponse struct {
	ErrorCode int32 `thrift:"errorCode,1,required" json:"errorCode"`
}

func NewFillDataResponse() *FillDataResponse {
	return &FillDataResponse{}
}

func (p *FillDataResponse) GetErrorCode() int32 {
	return p.ErrorCode
}
func (p *FillDataResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FillDataResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *FillDataResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FillDataResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FillDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *FillDataResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FillDataResponse(%+v)", *p)
}

type RequestTriggerRequest struct {
	ServiceName string `thrift:"serviceName,1,required" json:"serviceName"`
	MethodName  string `thrift:"methodName,2,required" json:"methodName"`
}

func NewRequestTriggerRequest() *RequestTriggerRequest {
	return &RequestTriggerRequest{}
}

func (p *RequestTriggerRequest) GetServiceName() string {
	return p.ServiceName
}

func (p *RequestTriggerRequest) GetMethodName() string {
	return p.MethodName
}
func (p *RequestTriggerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestTriggerRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *RequestTriggerRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MethodName = v
	}
	return nil
}

func (p *RequestTriggerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestTriggerRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestTriggerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:serviceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return fmt.Errorf("%T.serviceName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:serviceName: %s", p, err)
	}
	return err
}

func (p *RequestTriggerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("methodName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:methodName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MethodName)); err != nil {
		return fmt.Errorf("%T.methodName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:methodName: %s", p, err)
	}
	return err
}

func (p *RequestTriggerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestTriggerRequest(%+v)", *p)
}

type RequestTriggerResponse struct {
	ErrorCode    int32  `thrift:"errorCode,1,required" json:"errorCode"`
	ReqponseJson string `thrift:"reqponseJson,2,required" json:"reqponseJson"`
}

func NewRequestTriggerResponse() *RequestTriggerResponse {
	return &RequestTriggerResponse{}
}

func (p *RequestTriggerResponse) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *RequestTriggerResponse) GetReqponseJson() string {
	return p.ReqponseJson
}
func (p *RequestTriggerResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RequestTriggerResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *RequestTriggerResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ReqponseJson = v
	}
	return nil
}

func (p *RequestTriggerResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestTriggerResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RequestTriggerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *RequestTriggerResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqponseJson", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:reqponseJson: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ReqponseJson)); err != nil {
		return fmt.Errorf("%T.reqponseJson (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:reqponseJson: %s", p, err)
	}
	return err
}

func (p *RequestTriggerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestTriggerResponse(%+v)", *p)
}
